{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","current","length","calculateWinner","setState","step","moves","map","move","desc","jumpTo","winner","status","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"2NAIMA,G,MAAS,SAACC,GAAD,OACb,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,UAILC,E,2KACSC,GAAI,IAAD,OACd,OACE,cAACN,EAAD,CACEI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAK9B,IAAD,OACP,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACE,cAACF,EAAD,CACEI,MAAOG,KAAKN,MAAMO,QAAQ,GAC1BL,QAAS,kBAAM,EAAKF,MAAME,QAAQ,MAEnCI,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA7BTC,IAAMC,WAoCpBC,E,kDACJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,QAAS,CAAC,CAAEN,QAASO,MAAM,GAAGC,KAAK,QACnCC,WAAY,EACZC,SAAS,GALM,E,wDASPZ,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAC9DG,EAAUN,EAAQA,EAAQO,OAAS,GACnCb,EAAO,YAAOY,EAAQZ,SAExBc,EAAgBd,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKgB,SAAS,CACZT,QAAQ,GAAD,mBAAMA,GAAY,CAAC,CAAEN,aAC5BS,WAAYH,EAAQO,OACpBH,SAAUX,KAAKM,MAAMK,a,6BAIlBM,GACLjB,KAAKgB,SAAS,CACZN,WAAYO,EACZN,QAASM,EAAO,IAAM,M,+BAIhB,IAAD,OACDV,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAC9DG,EAAUN,EAAQP,KAAKM,MAAMI,YAC7BQ,EAAQX,EAAQY,KAAI,SAACF,EAAMG,GAC/B,IAAMC,EAAOD,EAAI,sBAAkBA,GAAS,mBAC5C,OACE,6BACE,wBAAQxB,QAAS,kBAAM,EAAK0B,OAAOF,IAAnC,SAA2CC,KADpCD,MAMPG,EAASR,EAAgBF,EAAQZ,SACjCuB,EAASD,EAAM,kBACNA,GADM,uBAEDvB,KAAKM,MAAMK,QAAU,IAAM,KAE/C,OACE,sBAAKhB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEG,QAASY,EAAQZ,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK0B,YAAY1B,QAGrC,sBAAKJ,UAAU,YAAf,UACE,8BAAM6B,IACN,6BAAKN,c,GA5DIf,IAAMC,WAmEzB,SAASW,EAAgBd,GAYvB,IAXA,IAAMyB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGA3B,EAAI,EAAGA,EAAI2B,EAAMZ,OAAQf,IAAK,CAAC,IAAD,cACnB2B,EAAM3B,GADa,GAC9B4B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI5B,EAAQ0B,IAAM1B,EAAQ0B,KAAO1B,EAAQ2B,IAAM3B,EAAQ0B,KAAO1B,EAAQ4B,GACpE,OAAO5B,EAAQ0B,GAInB,OAAO,KAKTG,IAASC,OAAO,cAAC1B,EAAD,IAAU2B,SAASC,eAAe,U","file":"static/js/main.764e15c8.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst Square = (props) => (\n  <button className=\"square\" onClick={props.onClick}>\n    {props.value}\n  </button>\n);\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          <Square\n            value={this.props.squares[0]}\n            onClick={() => this.props.onClick(0)}\n          />\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{ squares: Array(9).fill(null) }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = [...current.squares];\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: [...history, ...[{ squares }]],\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[this.state.stepNumber];\n    const moves = history.map((step, move) => {\n      const desc = move ? `Go to move #${move}` : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    const winner = calculateWinner(current.squares);\n    const status = winner\n      ? `Winner: ${winner}`\n      : `Next Player: ${this.state.xIsNext ? \"X\" : \"O\"}`;\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}